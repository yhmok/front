[네이밍규칙]
1. 기본 규칙
    다음과 같은 기본 네이밍 규칙을 준수한다.
    A. 일반 규칙
        이름은 영문 소문자, 숫자, 언더스코어(_)로 작성한다.
    B. 시작 이름
        이름은 영문 소문자로만 시작할 수 있다.
        단, css 주석문은 영문 대문자를 허용한다. (예: /* NHN WSD1Team KDW 120101 */)
    C. 약속어
        • 약속어는 레이아웃 약속어, 객체 약속어, 이미지 약속어에 근거하여 작성한다.( 표 2-3 레이아웃 약속어
        범위,표 2-4 팝업 레이아웃 약속어 범위,표 B 2-1 객체 약속어,표 B 2-2 이미지 약속어에 근거하여
        작성한다.)
        • 약속어가 없으면, 종류와 특성을 나타내도록 네이밍하거나 공통 네이밍 약속어 Guide를 참고하여
        작성한다.
        • 공통요소 약속어(.u_)는 공통업무 담당자에 한에서만 사용 한다.
    D. 영문 소문자, 숫자, 언더스코어 조합
        • 영문 소문자, 숫자, 언더스코어(_)만 사용할 수 있다.
        • 언더스코어(_)는 단어와 단어 조합할 때만 사용한다.
        • 언더스코어(_)가 포함된 약속어는 숫자, 영문 소문자와 조합하여 사용할 수 있다

2. id 및 class 네이밍 규칙
    A. id, class
        • id는 문서 전체의 고유 식별자 이므로 한 문서에서 동일한 id를 여러 번 사용하지 않는다.
        • 레이아웃을 제외한 id는 스타일을 지정하지 않는다.
        • class는 문서에서 여러 번 사용할 수 있다.
    B. 레이아웃 약속어
        레이아웃에는 다음 표에 예약된 id만 사용한다.
    C. 팝업 레이아웃 약속어
        • 팝업 문서의 레이아웃 지정 범위는 동일하다.
        • 레이아웃 약속어 앞에 'pop_'를 조합하여 사용한다.
    D. 레이아웃 네이밍 조합
        • 레이아웃에 디자인 속성을 추가/변경하려면 class를 사용한다.
    E. 객체 네이밍
        • 객체 약속어는 표 B-1 객체 에 근거하여 작성한다.
        • 객체는 class만 사용할 수 있으며, 전사 공통 마크업 템플릿의 class와 중복되지 않아야 한다.
        • 개발과 연동되는 동적 객체도 class만 사용한다.
        • 팝업, iframe에도 동일한 규칙을 적용한다.
    F. class 네이밍 확장
        • 종속 확장 class
            기본형 class에 종속되어 여백, 색깔, 행간 등의 몇 가지 속성을 부여하고자 할 때 사용하는 clas
        • 독립 확장 class
            기본형 class의 변형이 타입으로 분류할 만큼 클 경우 사용하는 class.

3. 이미지 네이밍 규칙
    다음과 같은 이미지 네이밍 규칙을 준수한다.
    A. 이미지 네이밍
        • 이미지 약속어는 표 B-2 이미지 에 근거하여 작성한다.
        • 같은 분류의 이미지가 두 개 이상이면 파일 이름 마지막에 숫자를 추가하여 구분한다.
        • 이미지 네이밍은 이미지 확장자와 관계 없이 순차적으로 적용한다. 예) bu_dot1.gif, bu_dot2.jpg,   bu_dot3.png
        • 임시 이미지는 tmp_를 조합한다. 예) tmp_
    B. 이미지 네이밍 조합
        이미지 이름은 '형태_의미_상태' 순서로 조합한다.

4. 파일 및 폴더 네이밍 규칙
    A. 파일 및 폴더 네이밍
        HTML : '서비스영문이름.html' 로 사용
    B. 파일 및 폴더 네이밍 조합
        • HTML파일은 '메뉴이름_의미_상태' 순서로 조합한다.
        • CSS 파일은 '서비스이름'을 맨 앞으로 하여 조합한다.         


[html코드작성규칙]
1. 기본 규칙
    HTML 코드를 작성할 때 다음과 같은 기본 규칙을 준수한다.
    A. W3C Validation
        HTML은 해당 DTD의 명세에 맞게 작성하며, W3C validation을 통과해야 한다. 단, HTML5 DTD 선언 시 다음 오류 내용은 허용한다.
        • <iframe>의 frameborder, marginwidth, marginheight, scrolling 애트리뷰트
    B. 영문 소문자 사용
        DTD를 제외한 모든 요소와 애트리뷰트는 소문자로 작성한다.
    C. 애트리뷰트값 표기
        애트리뷰트값은 큰따옴표(" ")로 묶는다.
    D. Character entity references 사용
        특수 기호는 문자 엔티티 참조를 사용하여 코드로 변환한다. 자세한 사항은 아래 경로에서 확인할 수 있다.
        단, 아포스트로피(‘)는 &#39;로 선언한다.
        HTML 4.01의 Character entity references: http://www.w3.org/TR/html4/sgml/entities.html
        HTML 5의 Character references: http://www.w3.org/TR/html5/syntax.html#character-references
    E. 스크립트 선언 지양
         Javascript를 사용하되 태그에 inline방식으로 사용하는 이벤트 속성 및 스크립트는 HTML 산출물에 선언하지  않는다.(<head>태그 사이 또는 <body>태그 최하단에 선언할 수 있다)        

2. 들여쓰기 규칙
    들여쓰기를 하면 코드의 가독성이 높아지고 전체 HTML 구조를 쉽게 파악할 수 있다. 다음과 같은 들여쓰기 규칙을 준수한다.
    마크업의 중첩이 깊어질 때마다 자식 요소는 1탭 들여 쓰고, 1탭의 크기는 공백 4칸으로 설정한다. 문서 내에서 반드시 탭을 이용하여 들여쓰기를 하며, 탭을 대신하여 공백으로 띄어 들여쓰지 않는다. 또한 다음의 경우에는 중첩 단계의 파악이 용이하도록 들여쓰지 않는다.
    • <html>의 자식 요소인 <head>, <body>
    • <head>의 자식 요소
    • <body>의 자식 요소
    • <table>의 자식 요소인 <caption>, <colgroup>, <col>, <thead>, <tbody>, <tfoot>, <tr>,<th>, <td>
    • <ul>, <ol>, <dl>의 자식 요소인 <li>, <dt>, <dd> 요소
    • <fieldset>의 자식 요소인 <legend>
    • <map>의 자식 요소인 <area> 
3. 빈 줄
    빈 줄을 사용하려면 다음과 같은 사용 규칙을 준수한다. 의미 있는 객체를 구분하기 위하여 코드 그룹 간 1줄씩 빈 줄을 만드는 것은 허용한다. 빈 줄의 간격은 1줄을 초과하지 않는다.

4. DTD 및 인코딩
    4.1 DTD 선언
        HTML 문서는 반드시 DTD를 선언한다.     
        A. 기본 DTD
            신규 HTML 문서를 작성할 때 'HTML5'를 사용한다.
        B. 기타 DTD
            사용 중인 서비스를 부분 개편하거나 완전히 개편하더라도 기존의 HTML/CSS 데이터 의존도가 높다면, 기존과 동일한 DTD를 사용할 수 있다.
    4.2 인코딩 선언
        HTML 문서는 반드시 인코딩 정보를 선언한다. 인코딩 설정은 DB의 인코딩 방식과도 관련이 있으므로 반드시 담당 개발자와 협의하여 정해야 한다.
        A. 기본 인코딩
            신규 HTML 문서를 작성할 때 기본 인코딩은 utf-8을 원칙으로 한다
        B. 기타 인코딩
            utf-8 인코딩을 사용할 수 없으면 euc-kr을 사용한다.

5 주석
    A. 기본 형식
        HTML 주석의 시작과 종료는 아래와 같이 표기하며, 기본 형식에 맞게 작성한다        
        • 주석 기호와 주석 내용 사이에는 반드시 공백 한 칸이 있어야 한다.
        • 시작과 종료 주석의 주석 내용은 동일해야 한다.    
    B. 레이아웃 및 콘텐츠 영역의 주석 표기
        wrap을 제외한 레이아웃과 독립된 콘텐츠 영역의 시작과 끝에 주석을 표기하며, 독립된 콘텐츠 영역의 주석    표기는 선택 사항이다.
        HTML 코드와 주석은 줄로 분리해야 한다.        
    C. 개발 적용과 관련된 주석 표기
        개발 적용과 관련된 주석은 해당되는 영역 위에 표기하며, 종료 주석은 표기하지 않는다. 주석 앞에는 [D]라는 말머리를 사용하여 담당 개발자가 반드시 확인할 수 있도록 한다. 
            

[ HTML 요소 작성 규칙]
1. 기본 규칙
    특정 요소에 class, style을 선언할 때는 선언 순서를 준수한다. 다음과 같이 class와 style은 제일 뒷부분에 선언한다.

2. 전역 구조화 요소
    A. <html>
        다음과 같이 lang 애트리뷰트를 선언한다.
        class 애트리뷰트는 선언하지 않는다.
        <html lang="ko">
        XHTML DTD 선언 시에는 다음과 같이 lang 애트리뷰트를 선언한다.
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
        lang 애트리뷰트는 User Agent가 언어를 올바로 해석할 수 있게 도와주며, 검색과 음성 장치(speech
        synthesizers)에 활용된다. 언어 코드는 모든 요소에 사용할 수 있지만 HTML 요소에 해당 문서의 주 언어
        코드만 선언한다.
        HTML 4.01 Specification, XHTML 1.0 Specification에서 자연어는 RFC 1766에 명시된 언어 코드를
        사용한다. RFC1766은 각각 ISO639, ISO3166을 참조하며, ISO Specification은 유료이므로 아래 웹 페이지를
        참조한다.
        • MSDN Language Codes: http://msdn.microsoft.com/en-au/library/ms533052(VS.85).aspx
        자주 사용하는 국가코드는 en(영어), ja(일본어), zh-cn(중국어)이다.
    B. <head>
        meta, title, link, script, style 순서로 요소를 선언한다.
    C. <title>
        "메뉴 : 브랜드명 서비스"의 형식으로 작성한다.
    D. <link>
        rel, type, href 애트리뷰트를 선언한다.
    E. <script>
        src 애트리뷰트를 선언한다. 
    F. <style>
    G. <body>
        모바일에서는 <body>에 브라우저별로 정의된 class명을 지정하고 이를 상속하여 브라우저별 CSS 렌더링  차이를 해결한다. 변경 사항이 잦으니 아래 경로에서 확인한다

3. 폼 요소
     폼 컨트롤 요소를 마크업할 때 <form>, <fieldset>, <legend> 요소를 다음과 같이 선언한다. 단, 필요에 따라 개별적으로 사용할 수 있다.
     A. <fieldset>
        <form> 요소의 자식 노드로 선언하여 폼 컨트롤 요소들을 그루핑하기 위해 선언한다.
    B. <legend>
        폼 컨트롤 그룹인 <fieldset>의 자식 요소로서 폼 컨트롤 요소들의 그룹 이름을 표현하기 위해 선언한다.
    C. <input>
        <label> 요소, title 애트리뷰트, alt 애트리뷰트를 통해 스크린 리더 사용자는 주변 맥락에 대한 이해 없이 각 요소에 독립적으로 접근해도 폼을 이해할 수 있다.
    D. <select>
        동일한 스타일의 셀렉트 박스이나 너비값이 다르면 선택적으로 style 애트리뷰트를 이용하여 width값을 제어한다.
    E. <label>
        <input>(text, checkbox, radio, file, password), <select>, <textarea>와 같은 폼 요소는 for 에트리뷰트를 부여하여 해당 요소의 id값과 동일한 이름으로 연결(coupling)한다. 단, 레이블 명이 위치할 공간이 없는 경우 title 애트리뷰트로 대체할 수 있다.
    F. <textarea>
        cols, rows 애트리뷰트를 선언한다.
        CSS를 정상적으로 불러오지 못하는 상황에서도 사용에 문제가 없도록 cols, rows의 애트리뷰트값은 각각
        최소 30, 5 이상이 되도록 선언한다. <label>로 연결(coupling) 할 수 없는 경우 title을 사용하여도 방하며
        id, title 애트리뷰트를 선언한다.
    G. <button>
        type 애트리뷰트를 선언한다.
        • type 애트리뷰트를 button으로 선언하여 열기/닫기, 접기/펼치기 등의 UI를 제어한다.
        • 폼 전송 역할을 하는 버튼은 submit 타입을 사용한다.
4. 표요소
    A. <table>
        2차원의 격자형 데이터를 표현하기 위해 사용한다.
        표의 요약 내용을 표기해야 할 때 summary 애트리뷰트를 선택적으로 사용할 수 있다
    B. <caption>
        표의 제목을 표현하기 위해 사용한다. caption 요소는 반드시 선언한다
    C. <colgroup>
        <col> 요소를 그루핑하여 디자인을 제어할 때 선언한다. 이 요소는 선택적으로 사용한다
    D. <col>
        표 각 열의 너비 지정을 위해 선언한다.
    E. <thead>
        표 머리글을 그루핑할 때 선언한다.

    F. <tfoot>
        표 바닥글을 그루핑할 때 선택적으로 선언한다. tfoot 요소는 thead와 tbody 요소 사이에 위치해야 한다
    G. <th>
        scope, abbr, id 애트리뷰트를 선언한다. abbr과 id애트리뷰느는 선택적으로 선언한다.
        • 표에 셀 제목이 명시되지 않은 경우에도 <th> 요소를 선언하여 의미에 맞는 제목을 명시한다(화면에
        표시되지 않도록 CSS로 숨김 처리).
        • scope 애트리뷰트는 반드시 선언해야 한다.(id, Headers 사용시 필요없음)
    H. <tbody>
        표 본문을 그루핑하기 위해 선언한다. 테이블의 본문(body)이 하나이고 <thead>나 <tfoot>이 없을 경우
    생략할 수 있다.

5. 기타요소
    A. <a>
        href, target, title 애트리뷰트를 선택적으로 선언한다.
        • 새 창으로 페이지를 표시해야 할 때 target 애트리뷰트를 선택적으로 사용한다.
        • title 애트리뷰트는 예고 없이 새 창을 표시해야 하거나 이동 경로를 정확히 알 수 없을 때, 또는
        브라우저에 독립적으로 툴팁을 표현하기 위해 사용한다.
    B. <iframe>
        <iframe>은 페이지 성능에 영향을 주기 때문에 가급적 사용하지 않는다.
        • 부득이하게 사용해야 할 경우 src, width, height, title, frameborder, marginwidth, marginheight,
        scrolling 애트리뷰트를 선언한다.
        • 스크린 리더 사용자를 위해 title 애트리뷰트에 제목을 표기한다. 상단에 iframe의 heading 요소가 있는
        경우더라도 반드시 title을 선언한다.
        • Iframe의 내용이 빈 경우더라도 빈 아이프레임라는 것을 사용자에게 알려주도록 한다.
    C. <img>
        src, width, height, title, alt, usemap 애트리뷰트를 선택적으로 선언한다.
        • 이미지 내용과 동일한 값을 alt 애트리뷰트에 표기하여, 이미지를 볼 수 없는 환경(스크린 리더, 이미지
        서버 장애, 이미지 표시 하지 않음 설정)에서도 내용을 확인할 수 있게 한다.
        • title 애트리뷰트를 선언한 경우에도 alt 애트리뷰트를 함께 선언한다.
        • title 애트리뷰트는 브라우저에 독립적으로 툴팁을 표현하기 위해 사용한다
    D. <map>
        <map> 요소의 name 애트리뷰트를 선언하여 <img> 요소의 usemap 애트리뷰트와 같은 이름으로
        커플링한다.
    E. <area>
        shape, coords, href, target, title, alt 애트리뷰트를 선택적으로 선언한다.
        • title 애트리뷰트를 선언한 경우에도 alt 애트리뷰트를 함께 선언한다.
        • target 애트리뷰트는 새 창으로 페이지를 표시해야 할 때 사용한다.
        • title 애트리뷰트는 예고 없이 새 창을 표시해야 하거나 이동 경로를 정확히 알 수 없을 때, alt
        애트리뷰트값을 축약하거나, 브라우저에 독립적으로 툴팁을 표현하기 위해 사용한다.

[css코드작성규칙]
1.기본규칙
    A. W3C Validation
         CSS는 사용 가능한 Hack과 CSS3 속성을 제외하고 W3C Validation을 통과해야 한다.
    B. 영문 소문자 사용
        모든 속성은 영문 소문자로만 작성한다.
    C. 따옴표 사용 범위
        공백이 포함된 폰트명, 한글 폰트명, 문자열 데이터 타입, filter 속성의 파라미터값은 작은따옴표(' ')로 감싸며,
        @charset 선언 시에는 속성 값을 큰따옴표(" ")로 감싼다. 그 외의 경우에는 따옴표를 사용하지 않는다. filter
        속성의 파라미터값에 따옴표를 사용하는 것은 선택사항이다.
        url 데이터 타입에는 작은 따옴표를 사용하지 않는다.
    D. 마지막 세미콜론 사용 지양
        마지막 속성의 세미콜론(;)은 삭제한다
2. 들여쓰기
    CSS 코드를 작성할 때는 들여쓰기를 하지 않는다.단, 중괄호”{}”가 중첩되는 경우 예외
3. 공백
    A. 선택자 간 공백 제거
    B. 속성 간 공백 제거
    C. 중괄호 좌우 공백 제거
4. 빈줄
    의미 있는 객체를 구분하기 위하여 코드 그룹 간 1줄씩 빈 줄을 넣을 수 있다. 단, 빈 줄의 간격은 1줄을
초과하지 않게 한다.
5. 줄 바꿈
    속성, 속성 값 사이 줄 바꿈은 허용하지 않는다.단, 선택자와 중괄호”{}”가 중첩되는 경우 예외
6. 인코딩
    폰트 이름이 영문이 아닐 때 이를 브라우저에서 바르게 표현하고, HTML에서 불러온 스타일을 제대로
    렌더링하려면 반드시 CSS 인코딩을 선언해야 한다. HTML과 동일한 인코딩을 문서 첫 줄에 공백 없이
    선언한다. 작성 예는 다음과 같다.
    @charset "utf-8";
    파일을 저장할 때는 반드시 선언한 인코딩과 동일한 인코딩을 선택한다.    
7. 선택자
    A. 공통 선택자 사용 지양
        최 상위 공통 선택자 '*'는 웹 페이지의 성능을 떨어뜨리고, Internet Explorer에서는 주석까지 영향을 받을 수 있으므로 사용하지 않는다.
    B. id 선택자 범위
        id 선택자는 2.2 id 및 class 네이밍 규칙에서 정의한 레이아웃(wrap, header, container, content, footer)에만 사용한다.
    C. 다중선택자 사용
        대응 범위에 인터넷 익스플로러 6.0 브라우저 환경이 포함될 경우 다중선택자 오류가 발생하므로 id와 class, class와 class 간의 다중선택자를 사용하지 않는다.
8. 속성
    8.1 속성 선언 순서
        속성을 선언할 때는 그 쓰임새가 레이아웃과 관련이 큰 것에서 시작하여 레이아웃과 무관한 것 순서로 선언한다. 관련 속성은 대표되는 속성 다음으로 선언하며, 표 5-11에 표기된 의미 순서대로 선언한다      
    8.2 속성 값 축약
        CSS 최적화를 위해 속성 값을 축약한다.
    8.3 약식 속성 사용 범위
        border 와 background 는 약식 속성을 우선적으로 사용하며, font 약식 속성은 사용하지 않는다.
        A. border
        속성 값은 border-width, border-style, border-color 순서로 선언한다.
        테두리 스타일 속성을 초기 선언할 때는 반드시 border 단일 속성을 사용하고, 이후 테두리의 부분적인
        속성이 변경될 경우 border 관련 속성(border-width, border-style, border-color)을 선언한다.
        테두리의 상, 우, 하, 좌 스타일이 2개 이상 다르면, 공통 스타일을 약식 속성으로 선언한 후 다른 부분은
        관련 속성으로 선언한다.
        B. background
        속성 값은 background-color, background-image, background-repeat, background-position,
        background-size, background-attachment, background-origin, background-clip 순서로 선언한다.
        배경 스타일 속성을 초기 선언할 때는 반드시 background 단일 속성을 사용하며, 이후 배경의 부분적인
        속성이 변경될 경우 background 관련 속성(background-color, background-image, background-repeat,
        background-position, background-size, background-attachment, background-origin, backgroundclip)을 선언한다.
        C. font
        폰트 스타일은 약식 속성으로 선언하지 않는다.
        폰트 스타일을 약식 속성으로 선언하면 다음과 같은 문제가 발생한다.
        아래와 같이 선언하면, font-weight:bold는 상속되지 않고 font 속성의 디폴트값인 font-weight:normal로
        변경되기 때문에 불필요한 속성 값을 선언해야 하는 문제가 발생한다.
    8.4 한글 폰트 선언
        영문폰트만 선언할 경우 특정 브라우저에서 폰트를 올바르게 출력하지 못하는 경우가 있으므로 한글 폰트 선언 시 한글, 영문 폰트를 모두 선언한다.
9. z-index
    z-index 속성의 속성 값의 범위는 최소 10, 최고 1000이며, 10 단위로 증감한다. 단, 10 단위 사이의 예외 변수가 발생하면 1 단위 값을 지정할 수 있다.
10 핵(hack)
    핵(hack)은 가능한 한 사용하지 않는다. 불가피하게 사용해야 할 때는 표 5-15에 제시된 핵만 사용하는 것을
원칙으로 한다.
11 미디어 타입
    미디어 타입 선언을 위한 명령문(중괄호 포함)은 다음과 같이 세부 스타일을 지정하는 명령문과 줄로 구분한다.
12 CSS 선언 타입
    CSS 선언 타입은 크게 세 가지로 분류하며, 용도에 맞게 사용한다.
    A. External type
        CSS를 선언하는 가장 기본적인 방식으로, CSS 파일이 별도로 존재하는 형태이다. link 요소를 통해 HTML과   CSS 파일을 연결한다        
    B. Internaltype
        HTML 파일의 head 안에 스타일을 선언하는 방식으로, 단발성 페이지의 CSS 분량이 작을 경우 사용한다.
    C. Inline type
        HTML의 개별 요소에 style 속성을 이용하여 스타일을 선언하는 방식으로, 속성 값이 동적으로 변경되어야 하는 경우 사용한다. 속성 값에 사용되는 %와 같은 특수기호는 Character entity references로 변환하지 않는다.
13 주석
    13.1 기본 형식
        CSS 주석은 아래와 같이 표기하며, 기본 형식에 맞게 작성한다.
        /*주석내용*/
        • 주석 기호와 주석 내용 사이에는 반드시 공백 한 칸이 있어야 한다.
        • 주석 기호와 주석 내용 사이의 줄 바꿈은 허용하지 않는다. 단, 주석 내용 간 줄 바꿈은 허용한다.
        • 종료 주석은 사용하지 않는다
    13.2 작성자 정보 표기
        작성자 표기는 css인코딩 선언 다음줄에 1회만 작성하며, 작성자 정보에는 소속 부서, 영문 이름 이니셜, CSS  파일 생성 날짜(YYMMDD 형식)를 작성한다. 유지보수만 담당하는 경우라도 모두 기입한다. 작성자 정보        밑에는 빈 줄(한 줄)을 두어 스타일을 선언하는 문장과 구분되도록 한다. 동일 파일을 유지보수 하는 경우,
        작성자 바로 아래 줄에 동일한 형식으로 작성한다.
    13.3 의미 있는 그룹 영역의 주석 표기
        의미 있는 객체를 구분하기 위한 주석은 영역의 윗부분에 표기한다. 초기화와 레이아웃 스타일 그룹을 제외한 의미 있는 그룹 영역의 주석 표기는 선택 사항이다.